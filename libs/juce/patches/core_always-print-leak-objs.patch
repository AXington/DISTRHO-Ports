diff --git a/modules/juce_core/memory/juce_LeakedObjectDetector.h b/modules/juce_core/memory/juce_LeakedObjectDetector.h
index 248e7bc..74b7779 100644
--- a/modules/juce_core/memory/juce_LeakedObjectDetector.h
+++ b/modules/juce_core/memory/juce_LeakedObjectDetector.h
@@ -29,6 +29,7 @@
 #ifndef JUCE_LEAKEDOBJECTDETECTOR_H_INCLUDED
 #define JUCE_LEAKEDOBJECTDETECTOR_H_INCLUDED
 
+#define DBG2(dbgtext)  { juce::String str; str << dbgtext; std::cout << str.toRawUTF8() << std::endl; }
 
 //==============================================================================
 /**
@@ -55,7 +56,7 @@ public:
     {
         if (--(getCounter().numObjects) < 0)
         {
-            DBG ("*** Dangling pointer deletion! Class: " << getLeakedObjectClassName());
+            DBG2 ("*** Dangling pointer deletion! Class: " << getLeakedObjectClassName());
 
             /** If you hit this, then you've managed to delete more instances of this class than you've
                 created.. That indicates that you're deleting some dangling pointers.
@@ -68,7 +69,7 @@ public:
                 your object management. Tut, tut. Always, always use ScopedPointers, OwnedArrays,
                 ReferenceCountedObjects, etc, and avoid the 'delete' operator at all costs!
             */
-            jassertfalse;
+            //jassertfalse;
         }
     }
 
@@ -83,7 +84,7 @@ private:
         {
             if (numObjects.value > 0)
             {
-                DBG ("*** Leaked objects detected: " << numObjects.value << " instance(s) of class " << getLeakedObjectClassName());
+                DBG2 ("*** Leaked objects detected: " << numObjects.value << " instance(s) of class " << getLeakedObjectClassName());
 
                 /** If you hit this, then you've leaked one or more objects of the type specified by
                     the 'OwnerClass' template parameter - the name should have been printed by the line above.
@@ -92,7 +93,7 @@ private:
                     your object management. Tut, tut. Always, always use ScopedPointers, OwnedArrays,
                     ReferenceCountedObjects, etc, and avoid the 'delete' operator at all costs!
                 */
-                jassertfalse;
+                //jassertfalse;
             }
         }
 
